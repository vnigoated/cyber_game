{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the Cyber Defenders game, storing information necessary for authentication and leaderboard ranking.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "username": {
          "type": "string",
          "description": "The username chosen by the player.",
          "format": "string"
        },
        "email": {
          "type": "string",
          "description": "The email address associated with the user's account.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user profile was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "createdAt"
      ]
    },
    "LeaderboardEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeaderboardEntry",
      "type": "object",
      "description": "Represents a single entry on the global leaderboard, linking a user to their score.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the leaderboard entry."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N LeaderboardEntry)"
        },
        "score": {
          "type": "number",
          "description": "The player's score for a particular game session."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the score was achieved.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "score",
        "timestamp"
      ]
    },
    "GameScenario": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GameScenario",
      "type": "object",
      "description": "Represents a social engineering scenario in the Cyber Defenders game, including details about the characters, channel, and content.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the game scenario."
        },
        "character": {
          "type": "string",
          "description": "Name of the character involved in the scenario (e.g., 'Riya (HR)')."
        },
        "avatar": {
          "type": "string",
          "description": "URL to the avatar image for the character.",
          "format": "uri"
        },
        "channel": {
          "type": "string",
          "description": "Communication channel used in the scenario (e.g., 'Email', 'Chat')."
        },
        "title": {
          "type": "string",
          "description": "Title or subject line of the message in the scenario."
        },
        "content": {
          "type": "string",
          "description": "The main content or dialogue of the scenario."
        },
        "correctLabel": {
          "type": "string",
          "description": "The correct label for the scenario ('malicious', 'suspicious', 'legitimate')."
        },
        "attackType": {
          "type": "string",
          "description": "Type of social engineering attack being simulated (e.g., 'Phishing')."
        },
        "explanationShort": {
          "type": "string",
          "description": "A brief explanation of the attack."
        },
        "explanationLong": {
          "type": "string",
          "description": "A more detailed explanation of the attack and how it works."
        },
        "tip": {
          "type": "string",
          "description": "A tip for the player on how to avoid this type of attack in the future."
        }
      },
      "required": [
        "id",
        "character",
        "channel",
        "title",
        "content",
        "correctLabel",
        "attackType",
        "explanationShort",
        "explanationLong",
        "tip"
      ]
    },
    "AiHint": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiHint",
      "type": "object",
      "description": "Stores hints generated by Agent Nova for specific scenarios.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AI hint."
        },
        "gameScenarioId": {
          "type": "string",
          "description": "Reference to GameScenario. (Relationship: GameScenario 1:N AiHint)"
        },
        "hintText": {
          "type": "string",
          "description": "The text of the hint provided by Agent Nova."
        },
        "hintOrder": {
          "type": "number",
          "description": "The order in which the hint is provided (e.g., first hint, second hint)."
        }
      },
      "required": [
        "id",
        "gameScenarioId",
        "hintText",
        "hintOrder"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path-based ownership ensures only the user can access their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user.  Matches Firebase Authentication UID."
            }
          ]
        }
      },
      {
        "path": "/leaderboard_entries/{leaderboardEntryId}",
        "definition": {
          "entityName": "LeaderboardEntry",
          "schema": {
            "$ref": "#/backend/entities/LeaderboardEntry"
          },
          "description": "Stores entries for the global leaderboard. Accessible for reading by all users to display rankings.",
          "params": [
            {
              "name": "leaderboardEntryId",
              "description": "The unique identifier for the leaderboard entry."
            }
          ]
        }
      },
      {
        "path": "/game_scenarios/{gameScenarioId}",
        "definition": {
          "entityName": "GameScenario",
          "schema": {
            "$ref": "#/backend/entities/GameScenario"
          },
          "description": "Stores game scenarios that are available to all authenticated users.",
          "params": [
            {
              "name": "gameScenarioId",
              "description": "The unique identifier for the game scenario."
            }
          ]
        }
      },
      {
        "path": "/game_scenarios/{gameScenarioId}/ai_hints/{aiHintId}",
        "definition": {
          "entityName": "AiHint",
          "schema": {
            "$ref": "#/backend/entities/AiHint"
          },
          "description": "Stores AI hints associated with a specific game scenario. Includes denormalized 'gameScenarioId' for authorization independence.",
          "params": [
            {
              "name": "gameScenarioId",
              "description": "The unique identifier for the game scenario."
            },
            {
              "name": "aiHintId",
              "description": "The unique identifier for the AI hint."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support user profiles, a global leaderboard, dynamically generated game scenarios, and AI hints. It emphasizes authorization independence through denormalization and structural segregation for clear security rules.\n\n*   User Profiles: Each user has a dedicated document in the `/users/{userId}` collection. This path-based ownership simplifies security rules.\n*   Leaderboard: The global leaderboard is stored in the `/leaderboard_entries/{leaderboardEntryId}` collection.  This is a flat collection with no hierarchical dependencies. All entries have identical security requirements.\n*   Game Scenarios: Scenarios are stored in the `/game_scenarios/{gameScenarioId}` collection.  The scenario documents can be read by any authenticated user, enabling dynamic game content.\n*   AI Hints: Hints are stored in the `/game_scenarios/{gameScenarioId}/ai_hints/{aiHintId}` subcollection.  Each hint is associated with a scenario. The `gameScenarioId` is denormalized into each `ai_hint` document to ensure authorization independence.\n\nThis design achieves Authorization Independence by avoiding `get()` calls in the security rules. For instance, access to `ai_hints` depends solely on the existence of a valid user and the `gameScenarioId` within the hint document itself, rather than requiring a `get()` on the parent `/game_scenarios/{gameScenarioId}` document.\n\nQAPs (Rules are not Filters) are supported by structural segregation. The `/users` collection stores private user data accessible only to the user. The `/game_scenarios` collection stores game scenarios that can be read by any authenticated user. This segregation avoids the need to filter based on user roles or permissions within a single collection."
  }
}